;;; Autogenerated by Thrift
;;; DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
;;; options string: cl

(thrift:def-package :thrift-generated :use ( :common :completion_hints :serialized_result_set :extension_functions))

(cl:in-package :thrift-generated)

(thrift:def-enum "TExecuteMode"
  (("GPU" . 1)
   ("CPU" . 2)))

(thrift:def-enum "TSourceType"
  (("DELIMITED_FILE" . 0)
   ("GEO_FILE" . 1)
   ("PARQUET_FILE" . 2)
   ("RASTER_FILE" . 3)
   ("ODBC" . 4)))

(thrift:def-enum "TPartitionDetail"
  (("DEFAULT" . 0)
   ("REPLICATED" . 1)
   ("SHARDED" . 2)
   ("OTHER" . 3)))

(thrift:def-enum "TGeoFileLayerContents"
  (("EMPTY" . 0)
   ("GEO" . 1)
   ("NON_GEO" . 2)
   ("UNSUPPORTED_GEO" . 3)))

(thrift:def-enum "TImportHeaderRow"
  (("AUTODETECT" . 0)
   ("NO_HEADER" . 1)
   ("HAS_HEADER" . 2)))

(thrift:def-enum "TRole"
  (("SERVER" . 0)
   ("AGGREGATOR" . 1)
   ("LEAF" . 2)
   ("STRING_DICTIONARY" . 3)))

(thrift:def-enum "TTableType"
  (("DEFAULT" . 0)
   ("TEMPORARY" . 1)
   ("FOREIGN" . 2)
   ("VIEW" . 3)))

(thrift:def-enum "TTableRefreshUpdateType"
  (("ALL" . 0)
   ("APPEND" . 1)))

(thrift:def-enum "TTableRefreshTimingType"
  (("MANUAL" . 0)
   ("SCHEDULED" . 1)))

(thrift:def-enum "TTableRefreshIntervalType"
  (("NONE" . 0)
   ("HOUR" . 1)
   ("DAY" . 2)))

(thrift:def-enum "TMergeType"
  (("UNION" . 0)
   ("REDUCE" . 1)))

(thrift:def-enum "TRasterPointType"
  (("NONE" . 0)
   ("AUTO" . 1)
   ("SMALLINT" . 2)
   ("INT" . 3)
   ("FLOAT" . 4)
   ("DOUBLE" . 5)
   ("POINT" . 6)))

(thrift:def-enum "TRasterPointTransform"
  (("NONE" . 0)
   ("AUTO" . 1)
   ("FILE" . 2)
   ("WORLD" . 3)))

(thrift:def-enum "TQueryType"
  (("UNKNOWN" . 0)
   ("READ" . 1)
   ("WRITE" . 2)
   ("SCHEMA_READ" . 3)
   ("SCHEMA_WRITE" . 4)))

(thrift:def-enum "TArrowTransport"
  (("SHARED_MEMORY" . 0)
   ("WIRE" . 1)))

(thrift:def-enum "TExpressionRangeType"
  (("INVALID" . 0)
   ("INTEGER" . 1)
   ("FLOAT" . 2)
   ("DOUBLE" . 3)))

(thrift:def-enum "TDBObjectType"
  (("AbstractDBObjectType" . 0)
   ("DatabaseDBObjectType" . 1)
   ("TableDBObjectType" . 2)
   ("DashboardDBObjectType" . 3)
   ("ViewDBObjectType" . 4)
   ("ServerDBObjectType" . 5)))

(thrift:def-enum "TDataSourceType"
  (("TABLE" . 0)))

(thrift:def-struct "tdatumval"
  (("int_val" nil :id 1 :type i64)
   ("real_val" nil :id 2 :type double)
   ("str_val" nil :id 3 :type string)))

(thrift:def-struct "tdatum"
  (("val" nil :id 1 :type (struct "tdatumval"))
   ("is_null" nil :id 2 :type bool)))

(thrift:def-struct "tstringvalue"
  (("str_val" nil :id 1 :type string)
   ("is_null" nil :id 2 :type bool)))

(thrift:def-struct "tcolumntype"
  (("col_name" nil :id 1 :type string)
   ("col_type" nil :id 2 :type (struct "ttypeinfo"))
   ("is_reserved_keyword" nil :id 3 :type bool)
   ("src_name" nil :id 4 :type string)
   ("is_system" nil :id 5 :type bool)
   ("is_physical" nil :id 6 :type bool)
   ("col_id" nil :id 7 :type i64)
   ("default_value" nil :id 8 :type string :optional t)))

(thrift:def-struct "trow"
  (("cols" nil :id 1 :type (thrift:list (struct "tdatum")))))

(thrift:def-struct "tcolumndata"
  (("int_col" nil :id 1 :type (thrift:list i64))
   ("real_col" nil :id 2 :type (thrift:list double))
   ("str_col" nil :id 3 :type (thrift:list string))))

(thrift:def-struct "tcolumn"
  (("data" nil :id 1 :type (struct "tcolumndata"))
   ("nulls" nil :id 2 :type (thrift:list bool))))

(thrift:def-struct "tstringrow"
  (("cols" nil :id 1 :type (thrift:list (struct "tstringvalue")))))

(thrift:def-struct "tkrb5session"
  (("sessionId" nil :id 1 :type string)
   ("krbToken" nil :id 2 :type string)))

(thrift:def-struct "tstepresult"
  (("serialized_rows" nil :id 1 :type (struct "tserializedrows"))
   ("execution_finished" nil :id 2 :type bool)
   ("merge_type" nil :id 3 :type (enum "TMergeType"))
   ("sharded" nil :id 4 :type bool)
   ("row_desc" nil :id 5 :type (thrift:list (struct "tcolumntype")))
   ("node_id" nil :id 6 :type i32)))

(thrift:def-struct "trowset"
  (("row_desc" nil :id 1 :type (thrift:list (struct "tcolumntype")))
   ("rows" nil :id 2 :type (thrift:list (struct "trow")))
   ("columns" nil :id 3 :type (thrift:list (struct "tcolumn")))
   ("is_columnar" nil :id 4 :type bool)))

(thrift:def-struct "tqueryresult"
  (("row_set" nil :id 1 :type (struct "trowset"))
   ("execution_time_ms" nil :id 2 :type i64)
   ("total_time_ms" nil :id 3 :type i64)
   ("nonce" nil :id 4 :type string)
   ("debug" nil :id 5 :type string)
   ("success" t :id 6 :type bool)
   ("query_type"   0 :id 7 :type (enum "TQueryType"))))

(thrift:def-struct "tdataframe"
  (("sm_handle" nil :id 1 :type binary)
   ("sm_size" nil :id 2 :type i64)
   ("df_handle" nil :id 3 :type binary)
   ("df_size" nil :id 4 :type i64)
   ("execution_time_ms" nil :id 5 :type i64)
   ("arrow_conversion_time_ms" nil :id 6 :type i64)
   ("df_buffer" nil :id 7 :type binary)))

(thrift:def-struct "tdbinfo"
  (("db_name" nil :id 1 :type string)
   ("db_owner" nil :id 2 :type string)))

(thrift:def-exception "tdbexception"
  (("error_msg" nil :id 1 :type string)))

(thrift:def-struct "tcopyparams"
  (("delimiter" nil :id 1 :type string)
   ("null_str" nil :id 2 :type string)
   ("has_header"   0 :id 3 :type (enum "TImportHeaderRow"))
   ("quoted" nil :id 4 :type bool)
   ("quote" nil :id 5 :type string)
   ("escape" nil :id 6 :type string)
   ("line_delim" nil :id 7 :type string)
   ("array_delim" nil :id 8 :type string)
   ("array_begin" nil :id 9 :type string)
   ("array_end" nil :id 10 :type string)
   ("threads" nil :id 11 :type i32)
   ("source_type"   0 :id 12 :type (enum "TSourceType"))
   ("s3_access_key" nil :id 13 :type string)
   ("s3_secret_key" nil :id 14 :type string)
   ("s3_region" nil :id 15 :type string)
   ("geo_coords_encoding"   6 :id 16 :type (enum "TEncodingType"))
   ("geo_coords_comp_param" 32 :id 17 :type i32)
   ("geo_coords_type"   18 :id 18 :type (enum "TDatumType"))
   ("geo_coords_srid" 4326 :id 19 :type i32)
   ("sanitize_column_names" t :id 20 :type bool)
   ("geo_layer_name" nil :id 21 :type string)
   ("s3_endpoint" nil :id 22 :type string)
   ("geo_assign_render_groups" t :id 23 :type bool)
   ("geo_explode_collections" nil :id 24 :type bool)
   ("source_srid" 0 :id 25 :type i32)
   ("s3_session_token" nil :id 26 :type string)
   ("raster_point_type"   1 :id 27 :type (enum "TRasterPointType"))
   ("raster_import_bands" nil :id 28 :type string)
   ("raster_scanlines_per_thread" nil :id 29 :type i32)
   ("raster_point_transform"   1 :id 30 :type (enum "TRasterPointTransform"))
   ("raster_point_compute_angle" nil :id 31 :type bool)
   ("raster_import_dimensions" nil :id 32 :type string)
   ("odbc_dsn" nil :id 33 :type string)
   ("odbc_connection_string" nil :id 34 :type string)
   ("odbc_sql_select" nil :id 35 :type string)
   ("odbc_sql_order_by" nil :id 36 :type string)
   ("odbc_username" nil :id 37 :type string)
   ("odbc_password" nil :id 38 :type string)
   ("odbc_credential_string" nil :id 39 :type string)
   ("add_metadata_columns" nil :id 40 :type string)))

(thrift:def-struct "tcreateparams"
  (("is_replicated" nil :id 1 :type bool)))

(thrift:def-struct "tdetectresult"
  (("row_set" nil :id 1 :type (struct "trowset"))
   ("copy_params" nil :id 2 :type (struct "tcopyparams"))))

(thrift:def-struct "timportstatus"
  (("elapsed" nil :id 1 :type i64)
   ("rows_completed" nil :id 2 :type i64)
   ("rows_estimated" nil :id 3 :type i64)
   ("rows_rejected" nil :id 4 :type i64)))

(thrift:def-struct "tfrontendview"
  (("view_name" nil :id 1 :type string)
   ("view_state" nil :id 2 :type string)
   ("image_hash" nil :id 3 :type string)
   ("update_time" nil :id 4 :type string)
   ("view_metadata" nil :id 5 :type string)))

(thrift:def-struct "tserverstatus"
  (("read_only" nil :id 1 :type bool)
   ("version" nil :id 2 :type string)
   ("rendering_enabled" nil :id 3 :type bool)
   ("start_time" nil :id 4 :type i64)
   ("edition" nil :id 5 :type string)
   ("host_name" nil :id 6 :type string)
   ("poly_rendering_enabled" nil :id 7 :type bool)
   ("role" nil :id 8 :type (enum "TRole"))
   ("renderer_status_json" nil :id 9 :type string)))

(thrift:def-struct "tpixel"
  (("x" nil :id 1 :type i64)
   ("y" nil :id 2 :type i64)))

(thrift:def-struct "tpixeltablerowresult"
  (("pixel" nil :id 1 :type (struct "tpixel"))
   ("vega_table_name" nil :id 2 :type string)
   ("table_id" nil :id 3 :type (thrift:list i64))
   ("row_id" nil :id 4 :type (thrift:list i64))
   ("row_set" nil :id 5 :type (struct "trowset"))
   ("nonce" nil :id 6 :type string)))

(thrift:def-struct "trenderresult"
  (("image" nil :id 1 :type binary)
   ("nonce" nil :id 2 :type string)
   ("execution_time_ms" nil :id 3 :type i64)
   ("render_time_ms" nil :id 4 :type i64)
   ("total_time_ms" nil :id 5 :type i64)
   ("vega_metadata" nil :id 6 :type string)))

(thrift:def-struct "tgpuspecification"
  (("num_sm" nil :id 1 :type i32)
   ("clock_frequency_kHz" nil :id 2 :type i64)
   ("memory" nil :id 3 :type i64)
   ("compute_capability_major" nil :id 4 :type i16)
   ("compute_capability_minor" nil :id 5 :type i16)))

(thrift:def-struct "thardwareinfo"
  (("num_gpu_hw" nil :id 1 :type i16)
   ("num_cpu_hw" nil :id 2 :type i16)
   ("num_gpu_allocated" nil :id 3 :type i16)
   ("start_gpu" nil :id 4 :type i16)
   ("host_name" nil :id 5 :type string)
   ("gpu_info" nil :id 6 :type (thrift:list (struct "tgpuspecification")))))

(thrift:def-struct "tclusterhardwareinfo"
  (("hardware_info" nil :id 1 :type (thrift:list (struct "thardwareinfo")))))

(thrift:def-struct "tmemorydata"
  (("slab" nil :id 1 :type i64)
   ("start_page" nil :id 2 :type i32)
   ("num_pages" nil :id 3 :type i64)
   ("touch" nil :id 4 :type i32)
   ("chunk_key" nil :id 5 :type (thrift:list i64))
   ("buffer_epoch" nil :id 6 :type i32)
   ("is_free" nil :id 7 :type bool)))

(thrift:def-struct "tnodememoryinfo"
  (("host_name" nil :id 1 :type string)
   ("page_size" nil :id 2 :type i64)
   ("max_num_pages" nil :id 3 :type i64)
   ("num_pages_allocated" nil :id 4 :type i64)
   ("is_allocation_capped" nil :id 5 :type bool)
   ("node_memory_data" nil :id 6 :type (thrift:list (struct "tmemorydata")))))

(thrift:def-struct "ttablemeta"
  (("table_name" nil :id 1 :type string)
   ("num_cols" nil :id 2 :type i64)
   ("is_view" nil :id 4 :type bool)
   ("is_replicated" nil :id 5 :type bool)
   ("shard_count" nil :id 6 :type i64)
   ("max_rows" nil :id 7 :type i64)
   ("table_id" nil :id 8 :type i64)
   ("max_table_id" nil :id 9 :type i64)
   ("col_types" nil :id 10 :type (thrift:list (struct "ttypeinfo")))
   ("col_names" nil :id 11 :type (thrift:list string))))

(thrift:def-struct "ttablerefreshinfo"
  (("update_type" nil :id 1 :type (enum "TTableRefreshUpdateType"))
   ("timing_type" nil :id 2 :type (enum "TTableRefreshTimingType"))
   ("start_date_time" nil :id 3 :type string)
   ("interval_type" nil :id 4 :type (enum "TTableRefreshIntervalType"))
   ("interval_count" nil :id 5 :type i64)
   ("last_refresh_time" nil :id 6 :type string)
   ("next_refresh_time" nil :id 7 :type string)))

(thrift:def-struct "ttabledetails"
  (("row_desc" nil :id 1 :type (thrift:list (struct "tcolumntype")))
   ("fragment_size" nil :id 2 :type i64)
   ("page_size" nil :id 3 :type i64)
   ("max_rows" nil :id 4 :type i64)
   ("view_sql" nil :id 5 :type string)
   ("shard_count" nil :id 6 :type i64)
   ("key_metainfo" nil :id 7 :type string)
   ("is_temporary" nil :id 8 :type bool)
   ("partition_detail" nil :id 9 :type (enum "TPartitionDetail"))
   ("table_type" nil :id 10 :type (enum "TTableType"))
   ("refresh_info" nil :id 11 :type (struct "ttablerefreshinfo"))))

(thrift:def-struct "tcolumnrange"
  (("type" nil :id 1 :type (enum "TExpressionRangeType"))
   ("col_id" nil :id 2 :type i32)
   ("table_id" nil :id 3 :type i32)
   ("has_nulls" nil :id 4 :type bool)
   ("int_min" nil :id 5 :type i64)
   ("int_max" nil :id 6 :type i64)
   ("bucket" nil :id 7 :type i64)
   ("fp_min" nil :id 8 :type double)
   ("fp_max" nil :id 9 :type double)))

(thrift:def-struct "tdictionarygeneration"
  (("dict_id" nil :id 1 :type i32)
   ("entry_count" nil :id 2 :type i64)))

(thrift:def-struct "ttablegeneration"
  (("table_id" nil :id 1 :type i32)
   ("tuple_count" nil :id 2 :type i64)
   ("start_rowid" nil :id 3 :type i64)))

(thrift:def-struct "tpendingquery"
  (("id" nil :id 1 :type i64)
   ("column_ranges" nil :id 2 :type (thrift:list (struct "tcolumnrange")))
   ("dictionary_generations" nil :id 3 :type (thrift:list (struct "tdictionarygeneration")))
   ("table_generations" nil :id 4 :type (thrift:list (struct "ttablegeneration")))
   ("parent_session_id" nil :id 5 :type string)))

(thrift:def-struct "tvarlen"
  (("payload" nil :id 1 :type binary)
   ("is_null" nil :id 2 :type bool)))

(thrift:def-struct "tdatablockptr"
  (("fixed_len_data" nil :id 1 :type binary :optional t)
   ("var_len_data" nil :id 2 :type (thrift:list (struct "tvarlen")) :optional t)))

(thrift:def-struct "tinsertdata"
  (("db_id" nil :id 1 :type i32)
   ("table_id" nil :id 2 :type i32)
   ("column_ids" nil :id 3 :type (thrift:list i32))
   ("data" nil :id 4 :type (thrift:list (struct "tdatablockptr")))
   ("num_rows" nil :id 5 :type i64)
   ("is_default" nil :id 6 :type (thrift:list bool))))

(thrift:def-struct "tchunkdata"
  (("data_buffer" nil :id 1 :type binary :optional t)
   ("index_buffer" nil :id 2 :type binary :optional t)))

(thrift:def-struct "tinsertchunks"
  (("db_id" nil :id 1 :type i32)
   ("table_id" nil :id 2 :type i32)
   ("data" nil :id 3 :type (thrift:list (struct "tchunkdata")))
   ("valid_indices" nil :id 4 :type (thrift:list i64))
   ("num_rows" nil :id 5 :type i64)))

(thrift:def-struct "tpendingrenderquery"
  (("id" nil :id 1 :type i64)))

(thrift:def-struct "trenderparseresult"
  (("merge_type" nil :id 1 :type (enum "TMergeType"))
   ("node_id" nil :id 2 :type i32)
   ("execution_time_ms" nil :id 3 :type i64)
   ("render_time_ms" nil :id 4 :type i64)
   ("total_time_ms" nil :id 5 :type i64)))

(thrift:def-struct "trawrenderpassdataresult"
  (("num_pixel_channels" nil :id 1 :type i32)
   ("num_pixel_samples" nil :id 2 :type i32)
   ("pixels" nil :id 3 :type binary)
   ("row_ids_A" nil :id 4 :type binary)
   ("row_ids_B" nil :id 5 :type binary)
   ("table_ids" nil :id 6 :type binary)
   ("accum_data" nil :id 7 :type binary)
   ("accum_depth" nil :id 8 :type i32)))

(thrift:def-struct "trawpixeldata"
  (("width" nil :id 1 :type i32)
   ("height" nil :id 2 :type i32)
   ("render_pass_map" nil :id 3 :type (thrift:map i32 (struct "trawrenderpassdataresult")))))

(thrift:def-struct "trenderdatum"
  (("type" nil :id 1 :type (enum "TDatumType"))
   ("cnt" nil :id 2 :type i32)
   ("value" nil :id 3 :type binary)))

(thrift:def-struct "trenderstepresult"
  (("merge_data" nil :id 1 :type (thrift:map string (thrift:map string (thrift:map string (thrift:map string (thrift:list (struct "trenderdatum")))))))
   ("raw_pixel_data" nil :id 2 :type (struct "trawpixeldata"))
   ("execution_time_ms" nil :id 3 :type i64)
   ("render_time_ms" nil :id 4 :type i64)
   ("total_time_ms" nil :id 5 :type i64)))

(thrift:def-struct "tdatabasepermissions"
  (("create_" nil :id 1 :type bool)
   ("delete_" nil :id 2 :type bool)
   ("view_sql_editor_" nil :id 3 :type bool)
   ("access_" nil :id 4 :type bool)))

(thrift:def-struct "ttablepermissions"
  (("create_" nil :id 1 :type bool)
   ("drop_" nil :id 2 :type bool)
   ("select_" nil :id 3 :type bool)
   ("insert_" nil :id 4 :type bool)
   ("update_" nil :id 5 :type bool)
   ("delete_" nil :id 6 :type bool)
   ("truncate_" nil :id 7 :type bool)
   ("alter_" nil :id 8 :type bool)))

(thrift:def-struct "tdashboardpermissions"
  (("create_" nil :id 1 :type bool)
   ("delete_" nil :id 2 :type bool)
   ("view_" nil :id 3 :type bool)
   ("edit_" nil :id 4 :type bool)))

(thrift:def-struct "tviewpermissions"
  (("create_" nil :id 1 :type bool)
   ("drop_" nil :id 2 :type bool)
   ("select_" nil :id 3 :type bool)
   ("insert_" nil :id 4 :type bool)
   ("update_" nil :id 5 :type bool)
   ("delete_" nil :id 6 :type bool)))

(thrift:def-struct "tserverpermissions"
  (("create_" nil :id 1 :type bool)
   ("drop_" nil :id 2 :type bool)
   ("alter_" nil :id 3 :type bool)
   ("usage_" nil :id 4 :type bool)))

(thrift:def-struct "tdbobjectpermissions"
  (("database_permissions_" nil :id 1 :type (struct "tdatabasepermissions") :optional t)
   ("table_permissions_" nil :id 2 :type (struct "ttablepermissions") :optional t)
   ("dashboard_permissions_" nil :id 3 :type (struct "tdashboardpermissions") :optional t)
   ("view_permissions_" nil :id 4 :type (struct "tviewpermissions") :optional t)
   ("server_permissions_" nil :id 5 :type (struct "tserverpermissions") :optional t)))

(thrift:def-struct "tdbobject"
  (("objectName" nil :id 1 :type string)
   ("objectType" nil :id 2 :type (enum "TDBObjectType"))
   ("privs" nil :id 3 :type (thrift:list bool))
   ("grantee" nil :id 4 :type string)
   ("privilegeObjectType" nil :id 5 :type (enum "TDBObjectType"))
   ("objectId" nil :id 6 :type i32)))

(thrift:def-struct "tdashboardgrantees"
  (("name" nil :id 1 :type string)
   ("is_user" nil :id 2 :type bool)
   ("permissions" nil :id 3 :type (struct "tdashboardpermissions"))))

(thrift:def-struct "tdashboard"
  (("dashboard_name" nil :id 1 :type string)
   ("dashboard_state" nil :id 2 :type string)
   ("image_hash" nil :id 3 :type string)
   ("update_time" nil :id 4 :type string)
   ("dashboard_metadata" nil :id 5 :type string)
   ("dashboard_id" nil :id 6 :type i32)
   ("dashboard_owner" nil :id 7 :type string)
   ("is_dash_shared" nil :id 8 :type bool)
   ("dashboard_permissions" nil :id 9 :type (struct "tdashboardpermissions"))))

(thrift:def-struct "tlicenseinfo"
  (("claims" nil :id 1 :type (thrift:list string))))

(thrift:def-struct "tsessioninfo"
  (("user" nil :id 1 :type string)
   ("database" nil :id 2 :type string)
   ("start_time" nil :id 3 :type i64)
   ("is_super" nil :id 4 :type bool)))

(thrift:def-struct "tgeofilelayerinfo"
  (("name" nil :id 1 :type string)
   ("contents" nil :id 2 :type (enum "TGeoFileLayerContents"))))

(thrift:def-struct "ttableepochinfo"
  (("table_id" nil :id 1 :type i32)
   ("table_epoch" nil :id 2 :type i32)
   ("leaf_index" nil :id 3 :type i32)))

(thrift:def-struct "tcustomexpression"
  (("id" nil :id 1 :type i32)
   ("name" nil :id 2 :type string)
   ("expression_json" nil :id 4 :type string)
   ("data_source_type" nil :id 5 :type (enum "TDataSourceType"))
   ("data_source_id" nil :id 6 :type i32)
   ("is_deleted" nil :id 7 :type bool)
   ("data_source_name" nil :id 8 :type string)))

(thrift:def-struct "tqueryinfo"
  (("query_session_id" nil :id 1 :type string)
   ("query_public_session_id" nil :id 2 :type string)
   ("current_status" nil :id 3 :type string)
   ("executor_id" nil :id 4 :type i32)
   ("submitted" nil :id 5 :type string)
   ("query_str" nil :id 6 :type string)
   ("login_name" nil :id 7 :type string)
   ("client_address" nil :id 8 :type string)
   ("db_name" nil :id 9 :type string)
   ("exec_device_type" nil :id 10 :type string)))

(thrift:def-struct "tleafinfo"
  (("leaf_id" nil :id 1 :type i32)
   ("num_leaves" nil :id 2 :type i32)))

(thrift:def-service "Heavy" nil
  (:method "connect" ((("user" string 1) ("passwd" string 2) ("dbname" string 3)) string)
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "krb5_connect" ((("inputToken" string 1) ("dbname" string 2)) (struct "tkrb5session"))
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "disconnect" ((("session" string 1)) void)
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "switch_database" ((("session" string 1) ("dbname" string 2)) void)
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "clone_session" ((("session" string 1)) string)
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "get_server_status" ((("session" string 1)) (struct "tserverstatus"))
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "get_status" ((("session" string 1)) (thrift:list (struct "tserverstatus")))
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "get_hardware_info" ((("session" string 1)) (struct "tclusterhardwareinfo"))
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "get_tables" ((("session" string 1)) (thrift:list string))
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "get_tables_for_database" ((("session" string 1) ("database_name" string 2)) (thrift:list string))
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "get_physical_tables" ((("session" string 1)) (thrift:list string))
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "get_views" ((("session" string 1)) (thrift:list string))
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "get_tables_meta" ((("session" string 1)) (thrift:list (struct "ttablemeta")))
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "get_table_details" ((("session" string 1) ("table_name" string 2)) (struct "ttabledetails"))
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "get_table_details_for_database" ((("session" string 1) ("table_name" string 2) ("database_name" string 3)) (struct "ttabledetails"))
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "get_internal_table_details" ((("session" string 1) ("table_name" string 2) ("include_system_columns" bool 3)) (struct "ttabledetails"))
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "get_internal_table_details_for_database" ((("session" string 1) ("table_name" string 2) ("database_name" string 3)) (struct "ttabledetails"))
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "get_users" ((("session" string 1)) (thrift:list string))
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "get_databases" ((("session" string 1)) (thrift:list (struct "tdbinfo")))
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "get_version" (() string)
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "start_heap_profile" ((("session" string 1)) void)
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "stop_heap_profile" ((("session" string 1)) void)
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "get_heap_profile" ((("session" string 1)) string)
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "get_memory" ((("session" string 1) ("memory_level" string 2)) (thrift:list (struct "tnodememoryinfo")))
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "clear_cpu_memory" ((("session" string 1)) void)
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "clear_gpu_memory" ((("session" string 1)) void)
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "set_cur_session" ((("parent_session" string 1) ("leaf_session" string 2) ("start_time_str" string 3) ("label" string 4) ("for_running_query_kernel" bool 5)) void)
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "invalidate_cur_session" ((("parent_session" string 1) ("leaf_session" string 2) ("start_time_str" string 3) ("label" string 4) ("for_running_query_kernel" bool 5)) void)
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "set_table_epoch" ((("session" string 1) ("db_id" i32 2) ("table_id" i32 3) ("new_epoch" i32 4)) void)
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "set_table_epoch_by_name" ((("session" string 1) ("table_name" string 2) ("new_epoch" i32 3)) void)
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "get_table_epoch" ((("session" string 1) ("db_id" i32 2) ("table_id" i32 3)) i32))
  (:method "get_table_epoch_by_name" ((("session" string 1) ("table_name" string 2)) i32))
  (:method "get_table_epochs" ((("session" string 1) ("db_id" i32 2) ("table_id" i32 3)) (thrift:list (struct "ttableepochinfo"))))
  (:method "set_table_epochs" ((("session" string 1) ("db_id" i32 2) ("table_epochs" (thrift:list (struct "ttableepochinfo")) 3)) void))
  (:method "get_session_info" ((("session" string 1)) (struct "tsessioninfo"))
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "get_queries_info" ((("session" string 1)) (thrift:list (struct "tqueryinfo")))
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "set_leaf_info" ((("session" string 1) ("leaf_info" (struct "tleafinfo") 2)) void)
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "sql_execute" ((("session" string 1) ("query" string 2) ("column_format" bool 3) ("nonce" string 4) ("first_n" i32 5) ("at_most_n" i32 6)) (struct "tqueryresult"))
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "sql_execute_df" ((("session" string 1) ("query" string 2) ("device_type" (enum "TDeviceType") 3) ("device_id" i32 4) ("first_n" i32 5) ("transport_method" (enum "TArrowTransport") 6)) (struct "tdataframe"))
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "sql_execute_gdf" ((("session" string 1) ("query" string 2) ("device_id" i32 3) ("first_n" i32 4)) (struct "tdataframe"))
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "deallocate_df" ((("session" string 1) ("df" (struct "tdataframe") 2) ("device_type" (enum "TDeviceType") 3) ("device_id" i32 4)) void)
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "interrupt" ((("query_session" string 1) ("interrupt_session" string 2)) void)
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "sql_validate" ((("session" string 1) ("query" string 2)) (thrift:list (struct "tcolumntype")))
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "get_completion_hints" ((("session" string 1) ("sql" string 2) ("cursor" i32 3)) (thrift:list (struct "tcompletionhint")))
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "set_execution_mode" ((("session" string 1) ("mode" (enum "TExecuteMode") 2)) void)
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "render_vega" ((("session" string 1) ("widget_id" i64 2) ("vega_json" string 3) ("compression_level" i32 4) ("nonce" string 5)) (struct "trenderresult"))
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "get_result_row_for_pixel" ((("session" string 1) ("widget_id" i64 2) ("pixel" (struct "tpixel") 3) ("table_col_names" (thrift:map string (thrift:list string)) 4) ("column_format" bool 5) ("pixelRadius" i32 6) ("nonce" string 7)) (struct "tpixeltablerowresult"))
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "create_custom_expression" ((("session" string 1) ("custom_expression" (struct "tcustomexpression") 2)) i32)
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "get_custom_expressions" ((("session" string 1)) (thrift:list (struct "tcustomexpression")))
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "update_custom_expression" ((("session" string 1) ("id" i32 2) ("expression_json" string 3)) void)
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "delete_custom_expressions" ((("session" string 1) ("custom_expression_ids" (thrift:list i32) 2) ("do_soft_delete" bool 3)) void)
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "get_dashboard" ((("session" string 1) ("dashboard_id" i32 2)) (struct "tdashboard"))
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "get_dashboards" ((("session" string 1)) (thrift:list (struct "tdashboard")))
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "create_dashboard" ((("session" string 1) ("dashboard_name" string 2) ("dashboard_state" string 3) ("image_hash" string 4) ("dashboard_metadata" string 5)) i32)
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "replace_dashboard" ((("session" string 1) ("dashboard_id" i32 2) ("dashboard_name" string 3) ("dashboard_owner" string 4) ("dashboard_state" string 5) ("image_hash" string 6) ("dashboard_metadata" string 7)) void)
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "delete_dashboard" ((("session" string 1) ("dashboard_id" i32 2)) void)
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "share_dashboards" ((("session" string 1) ("dashboard_ids" (thrift:list i32) 2) ("groups" (thrift:list string) 3) ("permissions" (struct "tdashboardpermissions") 4)) void)
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "delete_dashboards" ((("session" string 1) ("dashboard_ids" (thrift:list i32) 2)) void)
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "share_dashboard" ((("session" string 1) ("dashboard_id" i32 2) ("groups" (thrift:list string) 3) ("objects" (thrift:list string) 4) ("permissions" (struct "tdashboardpermissions") 5) ("grant_role" bool 6)) void)
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "unshare_dashboard" ((("session" string 1) ("dashboard_id" i32 2) ("groups" (thrift:list string) 3) ("objects" (thrift:list string) 4) ("permissions" (struct "tdashboardpermissions") 5)) void)
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "unshare_dashboards" ((("session" string 1) ("dashboard_ids" (thrift:list i32) 2) ("groups" (thrift:list string) 3) ("permissions" (struct "tdashboardpermissions") 4)) void)
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "get_dashboard_grantees" ((("session" string 1) ("dashboard_id" i32 2)) (thrift:list (struct "tdashboardgrantees")))
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "get_link_view" ((("session" string 1) ("link" string 2)) (struct "tfrontendview"))
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "create_link" ((("session" string 1) ("view_state" string 2) ("view_metadata" string 3)) string)
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "load_table_binary" ((("session" string 1) ("table_name" string 2) ("rows" (thrift:list (struct "trow")) 3) ("column_names" (thrift:list string) 4)) void)
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "load_table_binary_columnar" ((("session" string 1) ("table_name" string 2) ("cols" (thrift:list (struct "tcolumn")) 3) ("column_names" (thrift:list string) 4)) void)
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "load_table_binary_columnar_polys" ((("session" string 1) ("table_name" string 2) ("cols" (thrift:list (struct "tcolumn")) 3) ("column_names" (thrift:list string) 4) ("assign_render_groups" bool 5)) void)
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "load_table_binary_arrow" ((("session" string 1) ("table_name" string 2) ("arrow_stream" binary 3) ("use_column_names" bool 4)) void)
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "load_table" ((("session" string 1) ("table_name" string 2) ("rows" (thrift:list (struct "tstringrow")) 3) ("column_names" (thrift:list string) 4)) void)
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "detect_column_types" ((("session" string 1) ("file_name" string 2) ("copy_params" (struct "tcopyparams") 3)) (struct "tdetectresult"))
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "create_table" ((("session" string 1) ("table_name" string 2) ("row_desc" (thrift:list (struct "tcolumntype")) 3) ("create_params" (struct "tcreateparams") 4)) void)
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "import_table" ((("session" string 1) ("table_name" string 2) ("file_name" string 3) ("copy_params" (struct "tcopyparams") 4)) void)
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "import_geo_table" ((("session" string 1) ("table_name" string 2) ("file_name" string 3) ("copy_params" (struct "tcopyparams") 4) ("row_desc" (thrift:list (struct "tcolumntype")) 5) ("create_params" (struct "tcreateparams") 6)) void)
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "import_table_status" ((("session" string 1) ("import_id" string 2)) (struct "timportstatus"))
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "get_first_geo_file_in_archive" ((("session" string 1) ("archive_path" string 2) ("copy_params" (struct "tcopyparams") 3)) string)
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "get_all_files_in_archive" ((("session" string 1) ("archive_path" string 2) ("copy_params" (struct "tcopyparams") 3)) (thrift:list string))
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "get_layers_in_geo_file" ((("session" string 1) ("file_name" string 2) ("copy_params" (struct "tcopyparams") 3)) (thrift:list (struct "tgeofilelayerinfo")))
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "query_get_outer_fragment_count" ((("session" string 1) ("query" string 2)) i64)
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "check_table_consistency" ((("session" string 1) ("table_id" i32 2)) (struct "ttablemeta"))
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "start_query" ((("leaf_session" string 1) ("parent_session" string 2) ("query_ra" string 3) ("start_time_str" string 4) ("just_explain" bool 5) ("outer_fragment_indices" (thrift:list i64) 6)) (struct "tpendingquery"))
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "execute_query_step" ((("pending_query" (struct "tpendingquery") 1) ("subquery_id" i64 2) ("start_time_str" string 3)) (struct "tstepresult"))
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "broadcast_serialized_rows" ((("serialized_rows" (struct "tserializedrows") 1) ("row_desc" (thrift:list (struct "tcolumntype")) 2) ("query_id" i64 3) ("subquery_id" i64 4) ("is_final_subquery_result" bool 5)) void)
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "start_render_query" ((("session" string 1) ("widget_id" i64 2) ("node_idx" i16 3) ("vega_json" string 4)) (struct "tpendingrenderquery"))
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "execute_next_render_step" ((("pending_render" (struct "tpendingrenderquery") 1) ("merged_data" (thrift:map string (thrift:map string (thrift:map string (thrift:map string (thrift:list (struct "trenderdatum")))))) 2)) (struct "trenderstepresult"))
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "insert_data" ((("session" string 1) ("insert_data" (struct "tinsertdata") 2)) void)
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "insert_chunks" ((("session" string 1) ("insert_chunks" (struct "tinsertchunks") 2)) void)
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "checkpoint" ((("session" string 1) ("table_id" i32 2)) void)
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "get_roles" ((("session" string 1)) (thrift:list string))
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "get_db_objects_for_grantee" ((("session" string 1) ("roleName" string 2)) (thrift:list (struct "tdbobject")))
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "get_db_object_privs" ((("session" string 1) ("objectName" string 2) ("type" (enum "TDBObjectType") 3)) (thrift:list (struct "tdbobject")))
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "get_all_roles_for_user" ((("session" string 1) ("userName" string 2)) (thrift:list string))
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "get_all_effective_roles_for_user" ((("session" string 1) ("userName" string 2)) (thrift:list string))
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "has_role" ((("session" string 1) ("granteeName" string 2) ("roleName" string 3)) bool)
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "has_object_privilege" ((("session" string 1) ("granteeName" string 2) ("ObjectName" string 3) ("objectType" (enum "TDBObjectType") 4) ("permissions" (struct "tdbobjectpermissions") 5)) bool)
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "set_license_key" ((("session" string 1) ("key" string 2) ("nonce" string 3)) (struct "tlicenseinfo"))
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "get_license_claims" ((("session" string 1) ("nonce" string 2)) (struct "tlicenseinfo"))
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "get_device_parameters" ((("session" string 1)) (thrift:map string string))
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "register_runtime_extension_functions" ((("session" string 1) ("udfs" (thrift:list (struct "tuserdefinedfunction")) 2) ("udtfs" (thrift:list (struct "tuserdefinedtablefunction")) 3) ("device_ir_map" (thrift:map string string) 4)) void)
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "get_table_function_names" ((("session" string 1)) (thrift:list string))
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "get_runtime_table_function_names" ((("session" string 1)) (thrift:list string))
   :exceptions (("e" nil :id 1 :type (struct "tdbexception"))))
  (:method "get_table_function_details" ((("session" string 1) ("udtf_names" (thrift:list string) 2)) (thrift:list (struct "tuserdefinedtablefunction")))
   :exceptions (("e" nil :id 1 :type (struct "tdbexception")))))

